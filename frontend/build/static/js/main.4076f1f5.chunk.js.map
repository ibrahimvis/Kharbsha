{"version":3,"sources":["components/user/Signup.js","components/user/Login.js","App.js","serviceWorker.js","index.js"],"names":["Signup","props","state","e","className","type","name","placeholder","htmlFor","onClick","this","submitSignup","bind","Component","LoginBox","isLoginOpen","isRegisterOpen","setState","isSignupOpen","submitLogin","App","isAuth","user","message","isLogin","waiting","logoutHandler","preventDefault","localStorage","removeItem","path","component","render","Login","authLogin","userLogin","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"wPAkDeA,E,kDA9CX,WAAYC,GAAO,IAAD,8BAClB,cAAMA,IACDC,MAAM,GAFO,E,yDAMLC,M,+BAML,OAEA,yBAAKC,UAAW,mBACZ,yBAAKA,UAAW,OAEZ,yBAAKA,UAAU,eAEX,2BAAOC,KAAM,OAAOC,KAAK,YAAYC,YAAa,cAGtD,yBAAKH,UAAU,eACX,2BAAOI,QAAS,SAChB,2BAAOH,KAAM,OAAOC,KAAK,QAASC,YAAa,oBAGnD,yBAAKH,UAAU,eACX,2BAAOI,QAAS,aAChB,2BAAOH,KAAM,WAAWC,KAAK,WAAYC,YAAa,cAG1D,yBAAKH,UAAU,eACf,2BAAOI,QAAS,aACZ,2BAAOH,KAAM,WAAWC,KAAK,yBAA0BC,YAAa,4BAIxE,4BAAQF,KAAM,SAASD,UAAU,YAAYK,QAASC,KAAKC,aAAaC,KAAKF,OAA7E,iB,GAxCEG,aCuFPC,E,kDAvCX,WAAYb,GAAO,IAAD,8BAClB,cAAMA,IACDC,MAAM,CACPa,aAAa,EACbC,gBAAgB,GAJF,E,2DASlBN,KAAKO,SAAS,CAACF,aAAa,EAAMG,cAAc,M,kCAGpCf,M,+BAMJ,OAEA,yBAAKC,UAAW,mBACZ,yBAAKA,UAAW,OACZ,yBAAKA,UAAU,eACX,2BAAOI,QAAS,SAChB,2BAAOH,KAAM,OAAOC,KAAK,QAAQF,UAAW,cAAcG,YAAa,oBAG3E,yBAAKH,UAAU,eACX,2BAAOI,QAAS,aAChB,2BAAOH,KAAM,WAAWC,KAAK,WAAWF,UAAW,cAAcG,YAAa,cAElF,4BAAQF,KAAM,SAASD,UAAU,YAAYK,QAASC,KAAKS,YAAYP,KAAKF,OAA5E,e,GAjCIG,a,OCCTO,E,4MA1CblB,MAAQ,CACNmB,QAAQ,EACRC,KAAM,KACNC,QAAS,KACTC,SAAS,EACTC,SAAS,G,EAKXC,cAAgB,SAACvB,GACfA,EAAEwB,iBACFC,aAAaC,WAAW,SAExB,EAAKZ,SAAS,CACZI,QAAQ,EACRC,KAAM,KACNC,QAAS,Q,uDAIH,IAAD,OACP,OACE,yBAAKnB,UAAW,OAEtB,kBAAC,IAAD,KACQ,kBAAC,IAAD,CAAO0B,KAAK,UAAUC,UAAW/B,IADzC,OAEU,kBAAC,IAAD,CACE8B,KAAK,SACLE,OAAQ,SAAC/B,GAAD,OACN,kBAACgC,EAAD,iBACMhC,EADN,CAEEiC,UAAW,EAAKA,UAChBC,UAAW,EAAKA,sB,GAlCdtB,aCMEuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAAST,OACP,kBAAC,IAAMU,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM7B,c","file":"static/js/main.4076f1f5.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\n class Signup extends Component {\r\n\r\n    constructor(props){\r\n    super(props);\r\n    this.state={\r\n        \r\n     };\r\n   }\r\n   submitSignup (e){\r\n\r\n\r\n\r\n   }\r\n   render() {\r\n            return (\r\n \r\n            <div className =\"inner-container\">\r\n                <div className= \"box\">\r\n\r\n                    <div className=\"input-group\">\r\n                  \r\n                        <input type =\"text\" name=\"username \" placeholder =\"Username\"/>\r\n                    </div>\r\n                   \r\n                    <div className=\"input-group\">\r\n                        <label htmlFor =\"emil\"></label>\r\n                        <input type =\"text\" name=\"Email\"  placeholder =\"Email Address \"/>\r\n                    </div>\r\n\r\n                    <div className=\"input-group\">\r\n                        <label htmlFor =\"password\"></label>\r\n                        <input type =\"password\" name=\"password\"  placeholder =\"Password\"/>\r\n                    </div>\r\n\r\n                    <div className=\"input-group\">\r\n                    <label htmlFor =\"password\"></label>\r\n                        <input type =\"password\" name=\"Password confirmation \"  placeholder =\"Password confirmation \"/>\r\n                    </div>\r\n\r\n\r\n                    <button type =\"button\" className=\"login-btn\" onClick={this.submitSignup.bind(this)} >Sign Up</button>\r\n                </div>\r\n                \r\n            </div>\r\n            )\r\n    }\r\n}\r\n\r\nexport default Signup;\r\n ","import React, { Component } from 'react'\r\n\r\n// constructor(props){\r\n//     super(props);\r\n//     this.state={\r\n//     username:'',\r\n//     password:''\r\n//     }\r\n//    }\r\n\r\n// class Login extends Component {\r\n//     render() {\r\n//         return (\r\n\r\n//             <div>\r\n//            <form method =\"post\">\r\n//               Email <input type =\"text\" name =\"Email\"/>\r\n//                <br/>\r\n//                password <input type =\"password\" name =\"password\"/>\r\n//                 <input type = \"submit\" value =\"Login\"/>\r\n//            </form>\r\n//             </div>\r\n{/* <div className= \"root-container\">\r\n   \r\n    <div className=\"box-container\">\r\n        <div className= \"controller\">\r\n            Login\r\n        </div>\r\n\r\n        <div className= \"controller\">\r\n        Sing Up \r\n        </div>\r\n        </div>\r\n\r\n\r\n    <div className=\"box-container\">\r\n\r\n\r\n\r\n    </div>\r\n</div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Login; */}\r\n\r\n\r\n class LoginBox extends Component {\r\n\r\n    constructor(props){\r\n    super(props);\r\n    this.state={\r\n        isLoginOpen: true,\r\n        isRegisterOpen: false\r\n     };\r\n   }\r\n\r\n   showLoginBox() {\r\n    this.setState({isLoginOpen: true, isSignupOpen: false});\r\n  }\r\n\r\n   submitLogin (e){\r\n\r\n\r\n\r\n   }\r\n   render() {\r\n            return (\r\n \r\n            <div className =\"inner-container\">\r\n                <div className= \"box\">\r\n                    <div className=\"input-group\">\r\n                        <label htmlFor =\"emil\"></label>\r\n                        <input type =\"text\" name=\"Email\" className =\"login-input\" placeholder =\"Email Address \"/>\r\n                    </div>\r\n\r\n                    <div className=\"input-group\">\r\n                        <label htmlFor =\"password\"></label>\r\n                        <input type =\"password\" name=\"password\" className =\"login-input\" placeholder =\"Password\"/>\r\n                    </div>\r\n                    <button type =\"button\" className=\"login-btn\" onClick={this.submitLogin.bind(this)} >Login</button>\r\n                </div>\r\n                \r\n            </div>\r\n            )\r\n    }\r\n}\r\n\r\nexport default LoginBox;","import React, { Component } from 'react'\r\nimport Signup from './components/user/Signup.js';\r\nimport Login from \"./components/user/Login.js\";\r\nimport { Switch, Route, Redirect } from \"react-router-dom\";\r\n\r\n\r\nclass App extends Component {\r\n  state = {\r\n    isAuth: false,\r\n    user: null, // temp change it to null\r\n    message: null,\r\n    isLogin: false,\r\n    waiting: false,\r\n  };\r\n\r\n \r\n\r\n  logoutHandler = (e) => {\r\n    e.preventDefault();\r\n    localStorage.removeItem(\"token\");\r\n\r\n    this.setState({\r\n      isAuth: false,\r\n      user: null,\r\n      message: null,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className =\"app\">\r\n\r\n<Switch>\r\n        <Route path=\"/signup\" component={Signup} />} />\r\n          <Route\r\n            path=\"/login\"\r\n            render={(props) => (\r\n              <Login\r\n                {...props}\r\n                authLogin={this.authLogin}\r\n                userLogin={this.userLogin}\r\n              />\r\n            )}\r\n          />\r\n          </Switch>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default App","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {BrowserRouter} from 'react-router-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}